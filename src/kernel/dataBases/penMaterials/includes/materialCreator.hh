
//
//
//    Copyright (C) 2024 Universitat de València - UV
//    Copyright (C) 2024 Universitat Politècnica de València - UPV
//
//    This file is part of PenRed: Parallel Engine for Radiation Energy Deposition.
//
//    PenRed is free software: you can redistribute it and/or modify
//    it under the terms of the GNU Affero General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    PenRed is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with PenRed.  If not, see <https://www.gnu.org/licenses/>. 
//
//    contact emails:
//
//        vicent.gimenez.alventosa@gmail.com (Vicent Giménez Alventosa)
//        vicente.gimenez@uv.es (Vicente Giménez Gómez)
//    
//

//This code is a literal translation to C++ of the original PENELOPE routines
//written in FORTRAN used to construct the materials using the PENELOPE database.
//Notice that our translation uses the very same database that the original code,
//specifically the 2018 version. Following, we append the copyright disclaimer of
//the original FORTRAN source:

/*
C
C  This program generates material definition files for PENELOPE, which
C  contain tables of physical properties, interaction cross sections and
C  other particle transport characteristics. These data are extracted
C  from the database, which consists of the following 995 ASCII files
C  contained in the directory './pendbase/pdfiles':
C
C* PDATCONF.P14: atomic ground-state configurations, ionisation energies
C     and central values of the one-electron shell Compton profiles for
C     the elements, from hydrogen to einsteinium (Z=1-99).
C
C* PDCOMPOS.PEN: prepared composition data for 280 different materials
C     of radiological interest (adapted from Berger, NISTIR 4999, 1992).
C
C* MATERIAL-LIST.TXT: list of materials included in the PDCOMPOS.P08
c     file, with their identification numbers.
C
C* PDRELAX.P11: data on atomic relaxation, extracted from the LLNL
C     Evaluated Atomic Data Library.
C
C* 99 files named PDEELZZ.P08 with ZZ=atomic number (01-99). These
C     files contain tables of total cross sections and first and second
C     transport cross sections for elastic scattering of electrons and
C     positrons by neutral free atoms, generated by the program ELSEPA.
C     The same grid of energies, that covers the interval from 50 eV
C     up to 1 GeV, is used for all elements.
C
C* 99 files named EELDXZZZ.P08 with ZZZ=atomic number (001-099). These
C     files contain tables of differential cross sections for elastic
C     scattering of electrons by free neutral atoms. They where
C     generated by using the program ELSEPA and cover the energy
C     interval from 50 eV to 100 MeV.
C
C* 99 files named PELDXZZZ.P08 with ZZZ=atomic number (001-099). These
C     files contain tables of differential cross sections for elastic
C     scattering of positrons by free neutral atoms. They where
C     generated by using the program ELSEPA and cover the energy
C     interval from 50 eV to 100 MeV.
C
C* 99 files named PDEBRZZ.P08 that contain electron bremsstrahlung data.
C     These files were produced from the database of Seltzer and Berger.
C     The same grid of energies for all elements.
C
C* PDBRANG.P08: parameters of the intrinsic angular distribution of
C     bremsstrahlung photons. Determined by fitting the set of benchmark
C     partial-wave shape functions of Kissel, Quarles and Pratt.
C
C* 99 files named PDAFFZZ.P08, ZZ=atomic number (01-99), with tables of
C     atomic form factors and incoherent scattering functions of neutral
C     free atoms, extracted from the EPDL97 data library of Cullen et al.
C
C* 99 files named PDGRAZZ.P08 with ZZ=atomic number (01-99). These
C     files contain tables of anomalous scattering factors and total
C     cross sections for Rayleigh scattering of photons by neutral free
C     atoms, extracted from the EPDL97 data library of Cullen et al.
C
C* 99 files named PDGPPZZ.P11 with cross sections for pair and triplet
C     production in the field of neutral atoms, obtained from the XCOM
C     program of Berger and Hubbell. The same energy grid for all
C     elements.
C
C* 99 files named PDGPHZZ.P12, containing total atomic photoelectric
C     cross sections and partial cross sections for inner (K, L, M, and
C     N) shells, generated from the EPDL97 data library of Cullen et al.
C
C* 99 files named PDESIZZ.P14 with cross sections for ionisation of
C     inner (K, L, M, and N) shells by electron impact, generated from
C     the distorted-wave and plane-wave Born approximations.
C
C* 99 files named PDPSIZZ.P14 with cross sections for ionisation of
C     inner (K, L, M, and N) shells by positron impact, generated from
C     the distorted-wave and plane-wave Born approximations.
C
C  A material is completely characterised by its chemical composition,
C  i.e., elements present and number of atoms of each element in a
C  molecule (=stoichiometric index), mass density and mean excitation
C  energy. Alloys and mixtures are treated as compounds, with stoichio-
C  metric indexes equal or proportional to the percent number of atoms
C  of each element. Information about the material is supplied by the
C  user from the keyboard, following the prompts from 'material', or
C  read from the PDCOMPOS.PEN file, which contains information for 280
C  different materials. In the case of compounds, 'molecular' cross
C  sections are obtained by means of the additivity rule, i.e. as the
C  sum of the atomic cross sections.
C
C  To obtain the executable file 'material.exe', compile and link the
C  source files 'material.f', 'penelope.f', and 'rita.f'. The file
C  'material.exe' must be placed in the directory 'pendbase', which
C  contains the subdirectory 'pdfiles' with the database files.
C
C  NOTE: In the output file and in the simulation program, lengths are
C  given in cm and energies in eV. Consequently, total cross sections
C  are in cm**2, stopping powers in eV/cm, etc. However, macroscopic
C  cross sections listed in the input/output files are expressed in
C  mass-thickness units (mtu); 1 mtu = 1 g/cm**2.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z), INTEGER*4 (I-N)
      CHARACTER MFNAME*20
      MFNAME='null'
      CALL PEMATW(0,MFNAME)
      END
*/

#ifndef __PEN_MATERIAL_CREATOR__
#define __PEN_MATERIAL_CREATOR__

#include <cstring>
#include <stdio.h>
#include <math.h>
#include <string>
#include <sstream>
#include <iostream>
#include <limits>
#include <functional>
#include <vector>
#include "database.hh"
#include "dataBasesCommon.hh"
#include "composDB.hh"

namespace penred{

  namespace penMaterialCreator{
    
    struct materialCreator{

    public:
      
      //PENERROR_mod
      char REASON[128];	// Warning/error message.
      int IRETRN;		// Return code.
  
    private:
  
      static constexpr const int NEGP = 200;
      static constexpr const int NO   = 512;	//****  E/P inelastic collisions.
      static constexpr const int NRP  = 8000;	//  ****  Inner-shell ionisation by electron and positron impact.
      static constexpr const int NOCO  = 512;		      //  ****  Compton scattering.
      static constexpr const int NDIM  = 12000;	      //  ****  Photon simulation tables.
      static constexpr const int NBW   = 32;	              //  ****  Bremsstrahlung emission.
      static constexpr const int NEGP1 = 12000;	      //  ****  'Standard' energy grid.
      static constexpr const double REV     = 5.10998928E5;	      // Electron rest energy (eV)
      static constexpr const double AVOG    = 6.02214129E23;      // Avogadro's number
      static constexpr const double SL      = 137.035999074;      // Speed of light (1/alpha)
      static constexpr const double PI      = 3.1415926535897932; // Valor de PI
      static constexpr const double A0B     = 5.2917721092E-9;    // Bohr radius (cm)
      static constexpr const double HREV    = 27.21138505;	      // Hartree energy (eV)

      static constexpr const double MINEGRID   = 50.0;
      static constexpr const double MINDIMGRID = 10.0;
      
      static constexpr const int NQ  = 250;
      static constexpr const int NEX = 1024;
      static constexpr const int NTP = 12000;

      static constexpr const int NP       = 150;
      static constexpr const int NP2      = 300;	//(NP2 = NP+NP)
      static constexpr const int NPMINUS1 = 149;	//(NPM1 = NP-1)

      static constexpr const int NEM = 10000;
      static constexpr const int NOM = 1000;
      static constexpr const double ELRAD = 2.8179403267E-13;   // Class. electron radius (cm)
      static constexpr const int NA = 606;

  

      //CDCSEP
      static constexpr const int CDCSEP_NE = 96;
      double ETS[CDCSEP_NE], ETL[CDCSEP_NE], TH[NA], THR[NA], XMU[NA], XMUL[NA],
	ECS[CDCSEP_NE], ETCS1[CDCSEP_NE], ETCS2[CDCSEP_NE], EDCS[CDCSEP_NE][NA],
	PCS[CDCSEP_NE], PTCS1[CDCSEP_NE], PTCS2[CDCSEP_NE],
	PDCS[CDCSEP_NE][NA], DCSI[NA]; //DCSIL[NA], CSI, TCS1I, TCS2I;

      struct{
      // GCOaT, GCOaD (change E --> EE, M --> MM, IO --> IOSC)
      double EE;
      int IOSC;
      } CGCO00;

      static constexpr const int NBE = 57;
      struct{
	double EBT[NBE], XS[NBE][NBW], TXS[NBE], X[NBE], Y[NBE];
      } CEBR01;

      //CEBR02
      double P0[NEGP][NBW];

      //CEGRID
      // ****  Energy grid and interpolation constants for the current energy.
      double EMIN, EL, EU, ET[NEGP], DLEMP[NEGP], DLEMP1, DLFC, XEL, XE, XEK;
      int KE;
      
      struct{
      //  ****  Composition data.
      double STF[30], ZT, AT, RHO, VMOL;
      int IZ[30], NELEM;
      } COMPOS;

      //CADATA
      //  ****  Element data.
      double EB[99][30], ALW[99][30], CP0[99][30];
      int IFI[99][30], IKS[99][30], NSHT[99];

      //  *********************************************************************
      //                       BLOCK DATA PENDAT
      //  *********************************************************************
      //      BLOCK DATA PENDAT

      //  Physical data for the elements Z=1-99.

      //  ************  Chemical symbols of the elements.
      // COMPTE ! LASYMB[2] definida en moltes subrutines està mal. Ve del fortran char*2 LASYMB. ELIMINAR !

      static constexpr const char LASYMB[99][3] =
	{ "H ", "He", "Li", "Be", "B ", "C ", "N ", "O ", "F ", "Ne", "Na", "Mg",
	  "Al", "Si", "P ", "S ", "Cl", "Ar", "K ", "Ca", "Sc", "Ti", "V ", "Cr", "Mn", "Fe", "Co",
	  "Ni", "Cu", "Zn", "Ga", "Ge", "As", "Se", "Br", "Kr", "Rb", "Sr", "Y ", "Zr", "Nb", "Mo",
	  "Tc", "Ru", "Rh", "Pd", "Ag", "Cd", "In", "Sn", "Sb", "Te", "I ", "Xe", "Cs", "Ba", "La",
	  "Ce", "Pr", "Nd", "Pm", "Sm", "Eu", "Gd", "Tb", "Dy", "Ho", "Er", "Tm", "Yb", "Lu", "Hf",
	  "Ta", "W ", "Re", "Os", "Ir", "Pt", "Au", "Hg", "Tl", "Pb", "Bi", "Po", "At", "Rn", "Fr",
	  "Ra", "Ac", "Th", "Pa", "U ", "Np", "Pu", "Am", "Cm", "Bk", "Cf", "Es" };

      //  ************  Atomic weights (mean relative atomic masses).

      static constexpr const double ATW[99] =
	{ 1.0079, 4.0026, 6.9410, 9.0122, 1.0811E1, 1.2011E1, 1.4007E1, 1.5999E1,
	  1.8998E1, 2.0179E1, 2.2990E1, 2.4305E1, 2.6982E1, 2.8086E1, 3.0974E1, 3.2066E1,
	  3.5453E1, 3.9948E1, 3.9098E1, 4.0078E1, 4.4956E1, 4.7880E1, 5.0942E1, 5.1996E1,
	  5.4938E1, 5.5847E1, 5.8933E1, 5.8690E1, 6.3546E1, 6.5390E1, 6.9723E1, 7.2610E1,
	  7.4922E1, 7.8960E1, 7.9904E1, 8.3800E1, 8.5468E1, 8.7620E1, 8.8906E1, 9.1224E1,
	  9.2906E1, 9.5940E1, 9.7907E1, 1.0107E2, 1.0291E2, 1.0642E2, 1.0787E2, 1.1241E2,
	  1.1482E2, 1.1871E2, 1.2175E2, 1.2760E2, 1.2690E2, 1.3129E2, 1.3291E2, 1.3733E2,
	  1.3891E2, 1.4012E2, 1.4091E2, 1.4424E2, 1.4491E2, 1.5036E2, 1.5196E2, 1.5725E2,
	  1.5893E2, 1.6250E2, 1.6493E2, 1.6726E2, 1.6893E2, 1.7304E2, 1.7497E2, 1.7849E2,
	  1.8095E2, 1.8385E2, 1.8621E2, 1.9020E2, 1.9222E2, 1.9508E2, 1.9697E2, 2.0059E2,
	  2.0438E2, 2.0720E2, 2.0898E2, 2.0898E2, 2.0999E2, 2.2202E2, 2.2302E2, 2.2603E2,
	  2.2703E2, 2.3204E2, 2.3104E2, 2.3803E2, 2.3705E2, 2.3905E2, 2.4306E2, 2.4707E2,
	  2.4707E2, 2.5108E2, 2.5208E2 };

      //  ************  Mean excitation energies of the elements (eV).

      static constexpr const double EPX[99] =
	{ 19.2, 41.8, 40.0, 63.7, 76.0, 81.0, 82.0, 95.0, 115.0, 137.0, 149.0,
	  156.0, 166.0, 173.0, 173.0, 180.0, 174.0, 188.0, 190.0, 191.0, 216.0, 233.0, 245.0,
	  257.0, 272.0, 286.0, 297.0, 311.0, 322.0, 330.0, 334.0, 350.0, 347.0, 348.0, 343.0,
	  352.0, 363.0, 366.0, 379.0, 393.0, 417.0, 424.0, 428.0, 441.0, 449.0, 470.0, 470.0,
	  469.0, 488.0, 488.0, 487.0, 485.0, 491.0, 482.0, 488.0, 491.0, 501.0, 523.0, 535.0,
	  546.0, 560.0, 574.0, 580.0, 591.0, 614.0, 628.0, 650.0, 658.0, 674.0, 684.0, 694.0,
	  705.0, 718.0, 727.0, 736.0, 746.0, 757.0, 790.0, 790.0, 800.0, 810.0, 823.0, 823.0,
	  830.0, 825.0, 794.0, 827.0, 826.0, 841.0, 847.0, 878.0, 890.0, 902.0, 921.0, 934.0,
	  939.0, 952.0, 966.0, 980.0 };

      //  ************  Pair-production cross section parameters.

      //  ****  Screening parameter (R mc/hbar).
      static constexpr const double RSCR[99] =
	{ 1.2281E2, 7.3167E1, 6.9228E1, 6.7301E1, 6.4696E1, 6.1228E1, 5.7524E1,
	  5.4033E1, 5.0787E1, 4.7851E1, 4.6373E1, 4.5401E1, 4.4503E1, 4.3815E1, 4.3074E1,
	  4.2321E1, 4.1586E1, 4.0953E1, 4.0524E1, 4.0256E1, 3.9756E1, 3.9144E1, 3.8462E1,
	  3.7778E1, 3.7174E1, 3.6663E1, 3.5986E1, 3.5317E1, 3.4688E1, 3.4197E1, 3.3786E1,
	  3.3422E1, 3.3068E1, 3.2740E1, 3.2438E1, 3.2143E1, 3.1884E1, 3.1622E1, 3.1438E1,
	  3.1142E1, 3.0950E1, 3.0758E1, 3.0561E1, 3.0285E1, 3.0097E1, 2.9832E1, 2.9581E1,
	  2.9411E1, 2.9247E1, 2.9085E1, 2.8930E1, 2.8721E1, 2.8580E1, 2.8442E1, 2.8312E1,
	  2.8139E1, 2.7973E1, 2.7819E1, 2.7675E1, 2.7496E1, 2.7285E1, 2.7093E1, 2.6911E1,
	  2.6705E1, 2.6516E1, 2.6304E1, 2.6108E1, 2.5929E1, 2.5730E1, 2.5577E1, 2.5403E1,
	  2.5245E1, 2.5100E1, 2.4941E1, 2.4790E1, 2.4655E1, 2.4506E1, 2.4391E1, 2.4262E1,
	  2.4145E1, 2.4039E1, 2.3922E1, 2.3813E1, 2.3712E1, 2.3621E1, 2.3523E1, 2.3430E1,
	  2.3331E1, 2.3238E1, 2.3139E1, 2.3048E1, 2.2967E1, 2.2833E1, 2.2694E1, 2.2624E1,
	  2.2545E1, 2.2446E1, 2.2358E1, 2.2264E1 };
      //  ****  Asymptotic triplet contribution (eta).
      static constexpr const double ETA[99] =
	{ 1.1570, 1.1690, 1.2190, 1.2010, 1.1890, 1.1740, 1.1760, 1.1690, 1.1630,
	  1.1570, 1.1740, 1.1830, 1.1860, 1.1840, 1.1800, 1.1780, 1.1750, 1.1700, 1.1800, 1.1870,
	  1.1840, 1.1800, 1.1770, 1.1660, 1.1690, 1.1660, 1.1640, 1.1620, 1.1540, 1.1560, 1.1570,
	  1.1580, 1.1570, 1.1580, 1.1580, 1.1580, 1.1660, 1.1730, 1.1740, 1.1750, 1.1700, 1.1690,
	  1.1720, 1.1690, 1.1680, 1.1640, 1.1670, 1.1700, 1.1720, 1.1740, 1.1750, 1.1780, 1.1790,
	  1.1800, 1.1870, 1.1940, 1.1970, 1.1960, 1.1940, 1.1940, 1.1940, 1.1940, 1.1940, 1.1960,
	  1.1970, 1.1960, 1.1970, 1.1970, 1.1980, 1.1980, 1.2000, 1.2010, 1.2020, 1.2040, 1.2050,
	  1.2060, 1.2080, 1.2070, 1.2080, 1.2120, 1.2150, 1.2180, 1.2210, 1.2240, 1.2270, 1.2300,
	  1.2370, 1.2430, 1.2470, 1.2500, 1.2510, 1.2520, 1.2550, 1.2560, 1.2570, 1.2590, 1.2620,
	  1.2620, 1.2650 };

      //CEIN
      //  ****  E/P inelastic collisions.
      double EXPOT, OP2, F[NO], UI[NO], WRI[NO];
      int KZ[NO], KS[NO], NOSC;

      //CEIN00
      //  ****  Partial cross sections of individual shells/oscillators.
      // Associat a les routines PEMATR i EINaT solament.
      double SEH0[NO], SEH1[NO], SEH2[NO], SES0[NO], SES1[NO], SES2[NO], SET0[NO],
	SET1[NO], SET2[NO];

      //CPIN00
      //  ****  Partial cross sections of individual shells/oscillators.
      // Associat a les routines PEMATR i PINaT solament. COMPTE !! Les variables del COMMON tene noms differents en les dues.
      double SPH0[NO], SPH1[NO], SPH2[NO], SPS0[NO], SPS1[NO], SPS2[NO], SPT0[NO],
	SPT1[NO], SPT2[NO];
  
      //CGCO
      //  ****  Compton scattering.
      double FCO[NOCO], UICO[NOCO], FJ0[NOCO]; //PTRSH[NOCO];
      int KZCO[NOCO], KSCO[NOCO], NOSCCO;

      //CEBR
      //  ****  Bremsstrahlung emission.
      double WB[NBW]; //PBCUT[NEGP], WBCUT[NEGP],
      //PDFB[NEGP][NBW], DPDFB[NEGP][NBW],
      //PACB[NEGP][NBW],
      double ZBR2;

      struct{
	double EI, EE, CPS, AMOL, MOM;
      } CEIN01;
      
      struct{
	double EI, CPS, BHA1, BHA2, BHA3, BHA4;
	int MOM;
      } CPIN01;

      //CSUMGA
      int IERGA, NCALL;		// Error code, no. of function calls.

      //CSGAWR
      int ISGAW;			//Controls warning messages from SUMGA.


      // ** Functions

      //Error flags
      void ErrorFunction (const int NERROR);
      
      void EGRID (double EMINu, double EMAXu);
      void EELaW (FILE *);
      void ESIaW (FILE *);
      void PSIaW (FILE *);
      void EBRaW (FILE *);
      void BRaAW (double &, FILE *);
      void GRAaW (FILE *);
      void GPHaW (FILE *);
      void GPPaW (double *, double *, double *, int &);
      void RELAXW (const int &, FILE *);
      void EELdW (FILE *);
      double RLMOM (double *X, double *FCT, double XC, int NPpar, int MOM);
      void SPLINE (double *X, double *Y, double *A, double *B,
		   double *C, double *D, double S1, double SN, int N);
      void FINDI (double *X, double XC, int N, int &I);
      void ELINIT (int *IZ, double *STF, int &NELEM);
      double RMOMX (double *X, double *PDF, double XD, double XU, int NPpar, int MOM);
      void EINaT (double &E, double &WCCM, double &XH0, double &XH1, double &XH2,
		  double &XS0, double &XS1, double &XS2, double &XT1, double &XT2,
		  double &DELTA);
      void EBRaT (double &E, double &WCRM, double &XH0, double &XH1, double &XH2,
		  double &XS1, double &XS2);
      void PINaT (double &E, double &WCCM, double &XH0, double &XH1, double &XH2,
		  double &XS0, double &XS1, double &XS2, double &XT1, double &XT2,
		  double &DELTA);
      void PBRaT (double &E, double &WCRM, double &XH0, double &XH1, double &XH2,
		  double &XS1, double &XS2);

      void MERGE2 (double *X1, double *Y1, double *X2, double *Y2, double *XM,
		   double *YM, int &N1, int &N2, int &N);
      void GCOaT (double &E, double &CS);
      void EINaT1 (double &E, double &UK, double &WK, double DELTA, double &WCCM,
		   double &H0, double &H1, double &H2, double &S0, double &S1,
		   double &S2, double &R0, double &R1, double &R2);
      void PINaT1 (double &E, double &UK, double &WK, double DELTA, double &WCCM,
		   double &H0, double &H1, double &H2, double &S0, double &S1,
		   double &S2, double &R0, double &R1, double &R2);
      void SORT2 (double *X, double *Y, int &N);
      double SUMGA (std::function<double(materialCreator*, double)> FCT,
		    double XL, double XU, double TOL);
      double PINaDS (double RMU);
      double EINaDS (double RMU);
      double GCOaD (double CDT);

    public:
      void PEMATW (std::istream& in = std::cin,
		   const bool disableOutput = false,
		   const std::string& filename = std::string(""));

    };

    int createMat(const std::string& name,
		  const double density,
		  const std::vector<massFraction>& elements,
		  std::string& errorString,
		  const std::string& filenameIn = "");

    inline int createMat(const std::string& name,
			 const double density,
			 const unsigned Z,
			 std::string& errorString,
			 const std::string& filenameIn = ""){

      //Create composition
      std::vector<massFraction> composition;
      composition.emplace_back(Z,1.0);

      return createMat(name, density, composition, errorString, filenameIn);      
    }

    inline int createMat(const std::string& name,
			 const std::string& dataBase,
			 const std::string& dataBaseMat,
			 std::string& errorString,
			 const std::string& filenameIn = ""){

      //Get composition DB pointer
      auto db = penred::dataBases::compositions::getDB(dataBase);
      if(db == nullptr){
	printf("Error: Unknown composition DB '%s'\n",
	       dataBase.c_str());
	return -1;
      }

      //Get material composition and density from DB
      const std::vector<penred::massFraction> mfs = db->getElements(dataBaseMat);
      const double dens = db->getDensity(dataBaseMat);

      if(mfs.size() == 0 || dens <= 0.0){
	printf("Error: Unknown material '%s' in composition DB '%s'.\n",
	       dataBaseMat.c_str(), dataBase.c_str());
	return -2;
      }
      return createMat(name, dens, mfs, errorString, filenameIn);
    }

    int createMat(const unsigned matID,		  
		  const std::string& filename,
		  std::string& errorString);    
  } // namespace penMaterialCreator
} //namespace penred

#endif
